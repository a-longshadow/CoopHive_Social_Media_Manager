"""
Django settings for coophive project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# Database-first settings with environment fallback - NO HARDCODED DEFAULTS
def get_database_setting(key, env_fallback=True):
    """
    Get setting from database first, fallback to environment variable.
    NO hardcoded defaults for security - forces proper configuration.
    """
    try:
        from app_settings.models import AppSetting
        setting = AppSetting.objects.get(key=key)
        if setting.value:  # Only return if value exists
            return setting.value
    except:
        pass  # Database unavailable or setting doesn't exist
    
    if env_fallback:
        env_value = os.getenv(key)
        if env_value:  # Only return if environment variable is set
            return env_value
    
    # SECURITY: No hardcoded fallbacks - force proper configuration
    raise ValueError(
        f"CRITICAL CONFIGURATION ERROR: '{key}' must be set in database or environment variables.\n"
        f"This is required for security. Please configure this setting before starting the application.\n"
        f"Database: Set via /admin/app_settings/appsetting/ or management command\n"
        f"Environment: Set {key}=your-value in your environment or .env file"
    )

# SECURITY WARNING: keep the secret key used in production secret!
# NO hardcoded fallbacks - forces proper configuration
try:
    SECRET_KEY = get_database_setting('SECRET_KEY')
except ValueError as e:
    print(f"ðŸš¨ SECRET_KEY Configuration Error: {e}")
    raise

# SECURITY WARNING: don't run with debug turned on in production!
# NO hardcoded fallbacks - forces proper configuration
try:
    DEBUG = get_database_setting('DEBUG').lower() == 'true'
except ValueError as e:
    print(f"ðŸš¨ DEBUG Configuration Error: {e}")
    raise

# Railway deployment detection
RAILWAY_ENVIRONMENT = os.getenv('RAILWAY_ENVIRONMENT_NAME') is not None

# Allow the Railway subdomain and custom domains
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '0.0.0.0',  # Railway internal
    '.railway.app',  # Allow all railway.app subdomains
    'coophive-social-media-manager.up.railway.app',  # Your specific domain
]

# Add any additional hosts from environment
if os.getenv('ALLOWED_HOSTS'):
    ALLOWED_HOSTS.extend(os.getenv('ALLOWED_HOSTS').split(','))

# CSRF settings for Railway
CSRF_TRUSTED_ORIGINS = [
    'https://*.railway.app',
    'https://coophive-social-media-manager.up.railway.app',
]

# Security settings
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required for django-allauth
    
    # Third party apps
    'rest_framework',
    'debug_toolbar',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    
    # Local apps
    'user_account_manager.apps.UserAccountManagerConfig',
    'app_settings.apps.AppSettingsConfig',  # Database settings management
    'core.apps.CoreConfig',
    'linkedin.apps.LinkedinConfig',
    'twitter.apps.TwitterConfig',
    'farcaster.apps.FarcasterConfig',
    'bluesky.apps.BlueskyConfig',
]

# Email configuration - will be overridden below with database-first backend

# Authentication settings
LOGIN_URL = 'accounts:login'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Domain restriction - handled below with database-first approach

# Django Debug Toolbar
if DEBUG:
    INTERNAL_IPS = ['127.0.0.1']

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Static files in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

if DEBUG:
    MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')

ROOT_URLCONF = 'coophive.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'coophive.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration - Simple and reliable
database_url = os.getenv('DATABASE_URL')

if database_url:
    # Production: Parse DATABASE_URL manually (Railway provides this)
    if database_url.startswith('postgresql://'):
        # Parse PostgreSQL URL manually - no external dependency needed
        import re
        match = re.match(r'postgresql://([^:]+):([^@]+)@([^:]+):(\d+)/(.+)', database_url)
        if match:
            user, password, host, port, name = match.groups()
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.postgresql',
                    'NAME': name,
                    'USER': user,
                    'PASSWORD': password,
                    'HOST': host,
                    'PORT': port,
                    'CONN_MAX_AGE': 600,
                }
            }
        else:
            # Fallback if URL parsing fails
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.sqlite3',
                    'NAME': BASE_DIR / 'db.sqlite3',
                }
            }
    else:
        # Other database types - fallback to SQLite
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
else:
    # Development: Use SQLite (reliable and simple)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Whitenoise configuration
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Create required directories
for directory in [STATIC_ROOT, *STATICFILES_DIRS]:
    os.makedirs(directory, exist_ok=True)

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication Settings
AUTHENTICATION_BACKENDS = [
    # Custom backend for email/username login
    'user_account_manager.backends.EmailOrUsernameModelBackend',
    # Django default (for admin)
    'django.contrib.auth.backends.ModelBackend',
    # Allauth backend (for social login)
    'allauth.account.auth_backends.AuthenticationBackend',
]

# django-allauth settings
SITE_ID = 1
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Use custom adapter for Google OAuth with domain restrictions
SOCIALACCOUNT_ADAPTER = 'user_account_manager.adapters.CustomSocialAccountAdapter'

# Allauth social account settings
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_EMAIL_REQUIRED = False  # Don't require email confirmation
SOCIALACCOUNT_EMAIL_VERIFICATION = "none"  # Skip ALL email verification
SOCIALACCOUNT_LOGIN_ON_GET = True  # Direct login without confirmation page
SOCIALACCOUNT_SIGNUP_FORM_CLASS = None  # No signup form
SOCIALACCOUNT_FORMS = {}  # No custom forms

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        # No APP config - allauth will use SocialApp from database
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': False,  # Disable PKCE to fix token issues
        'FETCH_USERINFO': True,
        'VERIFIED_EMAIL': True,  # Trust Google's email verification
    }
}

# Email Settings - Database-first with environment fallback
# Use custom backend that loads settings dynamically at runtime
EMAIL_BACKEND = 'user_account_manager.email_backend.DatabaseFirstEmailBackend'

# Database-first settings with environment fallback - NO hardcoded defaults
EMAIL_HOST = get_database_setting('EMAIL_HOST')
EMAIL_PORT = int(get_database_setting('EMAIL_PORT'))
EMAIL_USE_SSL = get_database_setting('EMAIL_USE_SSL').lower() == 'true'
EMAIL_USE_TLS = get_database_setting('EMAIL_USE_TLS').lower() == 'true'
EMAIL_HOST_USER = get_database_setting('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = get_database_setting('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = get_database_setting('DEFAULT_FROM_EMAIL')

# Domain restriction settings - Database-first with environment fallback
# Use safe defaults during startup, will be overridden by auto-initialization
def get_domain_restriction_setting(key, default_value):
    """Safely get domain restriction setting with fallback to default during startup."""
    try:
        return get_database_setting(key)
    except ValueError:
        return default_value

COOPHIVE_DOMAIN_RESTRICTION = {
    'ENABLED': get_domain_restriction_setting('DOMAIN_RESTRICTION_ENABLED', 'True').lower() == 'true',
    'GOOGLE_VERIFICATION': get_domain_restriction_setting('GOOGLE_VERIFICATION_ENABLED', 'True').lower() == 'true',
    'ALLOWED_DOMAIN': get_domain_restriction_setting('ALLOWED_DOMAIN', 'coophive.network'),
    'SECURITY_ADMIN_EMAILS': get_domain_restriction_setting('SECURITY_ADMIN_EMAILS', '').split(',') if get_domain_restriction_setting('SECURITY_ADMIN_EMAILS', '') else [],
    'ADMIN_BYPASS': get_domain_restriction_setting('ADMIN_BYPASS', 'False').lower() == 'true',
    'LOG_USER_AGENTS': get_domain_restriction_setting('LOG_USER_AGENTS', 'True').lower() == 'true',
}

# Logging Configuration
# Create logs directory if it doesn't exist and we're not in a managed environment
if not (os.getenv('CI') or os.getenv('RAILWAY_ENVIRONMENT_NAME')):
    logs_dir = os.path.join(BASE_DIR, 'logs')
    if not os.path.exists(logs_dir):
        os.makedirs(logs_dir)

# Determine if we're in a managed environment (CI or Railway)
IS_MANAGED_ENV = bool(os.getenv('CI') or os.getenv('RAILWAY_ENVIRONMENT_NAME'))

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.StreamHandler' if IS_MANAGED_ENV else 'logging.handlers.RotatingFileHandler',
            'formatter': 'simple' if IS_MANAGED_ENV else 'verbose',
            **({"filename": os.path.join(BASE_DIR, 'logs/debug.log'),
                "maxBytes": 1024 * 1024 * 5,  # 5 MB
                "backupCount": 5} if not IS_MANAGED_ENV else {}),
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'] if IS_MANAGED_ENV else ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'core': {
            'handlers': ['console'] if IS_MANAGED_ENV else ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'social': {
            'handlers': ['console'] if IS_MANAGED_ENV else ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}
